<?php

/**
 * Implements hook_theme().
 */
function filetree_theme() {
  return array(
    'filetree' => array(
      'variables' => array('files' => array(), 'params' => array()),
    ),
  );
}

/**
 * Implements hook_filter_info().
 */
function filetree_filter_info() {
  $filters['filetree'] = array(
    'title' => t('File Tree'),
    'description' => t('Replaces [filetree dir="some-directory"] with an inline list of files.'),
    'settings callback' => '_filetree_settings',
    'default settings' => array(
      'folders' => '*',
    ),
    'tips callback'  => '_filetree_tips',
    'process callback' => '_filetree_process',
  );
  return $filters;
}

/**
 * Implements hook_filter_FILTER_settings().
 */
function _filetree_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;
  $elements['folders'] = array(
    '#type' => 'textarea',
    '#title' => t('Allowed folder paths'),
    '#description' => t('Enter one folder per line as paths which are allowed to be rendered as a list of files (relative to your <a href="@url">file system path</a>). The "*" character is a wildcard. Example paths are "*", "some-folder", and "some-folder/*".', array(
      '@url' => url('admin/config/media/file-system'),
    )),
    '#default_value' => $filter->settings['folders'],
  );
  return $elements;
}

/**
 * Implements hook_filter_FILTER_tips().
 */
function _filetree_tips($filter, $format, $long = FALSE) {
  $output = t('You may use [filetree dir="some-directory"] to display a list of files inline.');
  if ($long) {
    $output = '<p>' . $output . '</p>';
    $output .= '<p>' . t('Additional options include "multi", "controls", "extensions", "absolute", and "exclude"; for example, [filetree dir="some-directory" multi="false" controls="false" extensions="false" absolute="false" exclude="CVS; directory1; directory2"].') . '</p>';
    $output .= '<p>' . t('You can also read a <a href="http://drupal.org/project/filetree">detailed explanation of these options</a>.'). '</p>';
  }
  return $output;
}

/**
 * Implements hook_filter_FILTER_process().
 */
function _filetree_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  // Look for our special [filetree] token.
  if (!preg_match_all('/(?:<p>)?\[filetree\s*(.*?)\](?:<\/p>)?/s', $text, $matches)) {
    return $text;
  }

  // Setup our default parameters.
  $default_params = array(
    'dir' => NULL,
    'multi' => TRUE,
    'controls' => TRUE,
    'extensions' => TRUE,
    'absolute' => TRUE,
    'exclude' => array('CVS'),
  );

  // The token might be present multiple times; loop through each instance.
  foreach ($matches[1] as $key => $passed_params) {

    // Load the defaults.
    $params[$key] = $default_params;

    // Parse the parameters (but only the valid ones).
    preg_match_all('/(\w*)=(?:\"|&quot;)(.*?)(?:\"|&quot;)/', $passed_params, $matches2[$key]);
    foreach ($matches2[$key][1] as $param_key => $param_name) {
      if (in_array($param_name, array_keys($default_params))) {
        // If default param is a boolean, convert the passed param to boolean.
        // Note: "false" (as a string) is considered TRUE by PHP, so there's a
        // special check for it.
        if (is_bool($default_params[$param_name])) {
          $params[$key][$param_name] = $matches2[$key][2][$param_key] == "false" ? FALSE : (bool) $matches2[$key][2][$param_key];
        }
        else if ($param_name == 'exclude') {
          $params[$key][$param_name] = array_filter(array_map('trim', explode(';', $matches2[$key][2][$param_key])));
        }
        else {
          $params[$key][$param_name] = $matches2[$key][2][$param_key];
        }
      }
    }

    // Make sure that "dir" was provided,
    if (!$params[$key]['dir']
      // ...it's an allowed path for this input format,
      or !drupal_match_path($params[$key]['dir'], $filter->settings['folders'])
      // ...the URI builds okay,
      or !$params[$key]['uri'] = file_build_uri($params[$key]['dir'])
      // ...and it's within the files directory.
      or !file_prepare_directory($params[$key]['uri'])
      ) {
      continue;
    }

    // Flatten "exclude" array.
    $params[$key]['exclude'] = implode("\n", $params[$key]['exclude']);

    // Render tree.
    $files = _filetree_list_files($params[$key]['uri'], $params[$key]);
    $rendered = theme('filetree', array('files' => $files, 'params' => $params[$key]));

    // Replace token with rendered tree.
    $text = str_replace($matches[0], $rendered, $text);
  }

  return $text;
}

/**
 * Recursively lists folders and files in this directory.
 * 
 * Similar to file_scan_directory(), except that we need the hierarchy.
 * Returns a sorted list which is compatible with theme('item_list') or
 * theme('filetree'), folders first, then files.
 */
function _filetree_list_files($dir, $params) {
  $list = array();
  if (is_dir($dir) && $handle = opendir($dir)) {
    $folders = $files = array();
    while (FALSE !== ($file = readdir($handle))) {
      // Exclude certain paths:
      // - those which start with a period (".", "..", and hidden files),
      // - additional paths from the "exclude" param
      if ($file[0] != '.' and !drupal_match_path($file, $params['exclude'])) {
        if (is_dir("$dir/$file")) {
          $folders[$file] = array(
            'data' => $file,
            'children' => _filetree_list_files("$dir/$file", $params),
            'title' => $file,
            'class' => array('folder'),
          );
        }
        else {
          $filename = "$dir/$file";
          $pathinfo = pathinfo($file);
          $basename = basename($file);
          $name = $params['extensions'] ? $pathinfo['basename'] : substr($pathinfo['basename'], 0, strrpos($pathinfo['basename'], '.'));
          $url = $params['absolute'] ? file_create_url($filename) : substr(file_create_url($filename), strlen($GLOBALS['base_url'] . '/'));
          $files[$file] = array(
            'data' => l($name, $url),
            'title' => $file,
            'class' => array(_filetree_icon($pathinfo['extension'])),
          );
        }
      }
    }
    closedir($handle);
    asort($folders);
    asort($files);
    $list += $folders;
    $list += $files;
  }
  return $list;
}

/**
 * Determines which icon should be displayed, based on file extension.
 */
function _filetree_icon($extension) {
  $extension = strtolower($extension);
  $icon = 'file';
  $map = array(
    'application' => array('exe'),
    // 'code' => array(''),
    'css' => array('css'),
    'db' => array('sql'),
    'doc' => array('doc', 'docx'),
    'film' => array('avi', 'mov'),
    'flash' => array('flv', 'swf'),
    'html' => array('htm', 'html'),
    // 'java' => array(''),
    // 'linux' => array(''),
    'music' => array('mp3', 'aac'),
    'pdf' => array('pdf'),
    'php' => array('php'),
    'image' => array('jpg', 'jpeg', 'gif', 'png', 'bmp'),
    'ppt' => array('ppt'),
    'psd' => array('psd'),
    // 'ruby' => array(''),
    'script' => array('asp'),
    'txt' => array('txt'),
    'xls' => array('xls', 'xlsx'),
    'zip' => array('zip'),
  );
  foreach ($map as $key => $values) {
    foreach ($values as $value) {
      if ($extension == $value) {
        $icon = $key;
      }
    }
  }
  return $icon;
}

/**
 * Renders filetree.
 */
function theme_filetree($variables) {
  $files = $variables['files'];
  $params = $variables['params'];
  $output = '';

  // Render controls (but only if multiple folders is enabled, and only if
  // there is at least one folder to expand/collapse).
  if ($params['multi'] and $params['controls']) {
    $has_folder = FALSE;
    foreach ($files as $file) {
      if (isset($file['children'])) {
        $has_folder = TRUE;
        break;
      }
    }
    if ($has_folder) {
      $controls = array(
        '<a href="#" class="expand">' . t('expand all') . '</a>',
        '<a href="#" class="collapse">' . t('collapse all') . '</a>',
      );
      $output .= theme('item_list', array(
        'items' => $controls,
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array('class' => 'controls'),
      ));
    }
  }

  // Render files.
  $output .= theme('item_list', array(
    'items' => $files,
    'title' => NULL,
    'type' => 'ul',
    'attributes' => array('class' => 'files'),
  ));

  // Generate classes and unique ID for wrapper div.
  $id = drupal_clean_css_identifier(uniqid('filetree-'));
  $classes = array('filetree');
  if ($params['multi']) {
    $classes[] = 'multi';
  }

  return '<div id="' . $id . '" class="' . implode(' ', $classes) . '">' . $output . '</div>';
}
